@model MaxithermalWebApplication.Models.Setting

@{
    ViewBag.Title = "Details";
}

<h2>Details</h2>

<div>
    <dl class="dl-horizontal">
        <dt>
            Logger Serial
        </dt>
        <dd>
            @Html.DisplayFor(model => model.Serial)
        </dd>
        <dt>
            Logger Sensor
        </dt>
        @{
            string devType = "";
            string displayTimezone = "";
            switch (Model.Devicetype)
            {
                case 0x11:
                    devType = "Humidity, Room temperature";
                    break;
                case 0x22:
                    devType = "Humidity, LN2";
                    break;
                case 0x33:
                    devType = "Humidity, RTD2";
                    break;
                case 0x44:
                    devType = "LN2, Room Temperature";
                    break;
                case 0x55:
                    devType = "RTD2, Room temperature";
                    break;
                case 0x66:
                    devType = "Thermal couple, Humidity (%)";
                    break;
                case 0x77:
                    devType = "Room temperature, Thermal couple";
                    break;
            }
            if (Model.TimezoneId != null)
            {
                TimeZoneInfo zoneInfo = TimeZoneInfo.FindSystemTimeZoneById(Model.TimezoneId);
                displayTimezone = zoneInfo.DisplayName;
            }
        }
        <dd>
            @devType
        </dd>

        <dt>
            @Html.DisplayNameFor(model => model.Description)
        </dt>
        <dd>
            @Html.DisplayFor(model => model.Description)
        </dd>

        <dt>
            @Html.DisplayNameFor(model => model.Location)
        </dt>
        <dd>
            @Html.DisplayFor(model => model.Location)
        </dd>

        <dt>
            Email
        </dt>
        <dd>
            @Html.DisplayFor(model => model.Email)
        </dd>

        <dt>
            @Html.DisplayNameFor(model => model.Realtime.Status)
        </dt>
        <dd>
            @Html.DisplayFor(model => model.Realtime.Status)
        </dd>


        <dt>
            Stop key
        </dt>
        <dd>
            @(Model.Stopkey ? "Yes" : "No")
        </dd>
        <dt>
            Continue memory
        </dt>
        <dd>
            @(Model.ContinueMem ? "Yes" : "No")
        </dd>
        <dt>
            @Html.DisplayNameFor(model => model.Unit)
        </dt>
        <dd>
            @Html.DisplayFor(model => model.Unit)
        </dd>
        <dt>
            Timezone
        </dt>
        <dd>
            @displayTimezone
        </dd>
        <dt>
            Start time
        </dt>
        <dd>
            @Html.DisplayFor(model => model.Starttime)
        </dd>

        <dt>
            Delay time
        </dt>
        <dd>
            @Html.DisplayFor(model => model.Delay)
        </dd>

        <dt>
            Stop time
        </dt>
        <dd>
            @Html.DisplayFor(model => model.Stoptime)
        </dd>

        <dt>
            @Html.DisplayNameFor(model => model.Realtime.Runtime)
        </dt>
        <dd>
            @Html.DisplayFor(model => model.Realtime.Runtime)
        </dd>

        <dt>
            Setting time
        </dt>

        <dd>
            @Html.DisplayFor(model => model.Settingtime)
        </dd>
        <dt>
            Duration
        </dt>

        <dd>
            @Html.DisplayFor(model => model.DurationDay) Day @Html.DisplayFor(model => model.DurationHour) Hour
        </dd>

        <dt>
            Interval
        </dt>
        <dd>
            @Html.DisplayFor(model => model.IntervalHour)Hr @Html.DisplayFor(model => model.IntervalMin)Min @Html.DisplayFor(model => model.IntervalSec)Sec
        </dd>
        <dt>
            Interval send Lora
        </dt>
        <dd>
            @Html.DisplayFor(model => model.IntervalSendLoraMin) (Min)
        </dd>
        <dt>
            High alarm temp
        </dt>

        <dd>
            @{
                string highalrm1, highalrm2 = "", lowalrm1, lowalrm2;
                if (Model.Alarm.HighAlarmTemp == 1000 || Model.Alarm.HighAlarmTemp == 200 || Model.Alarm.LowAlarmTemp == 1000 || Model.Alarm.LowAlarmTemp == 200)
                {
                    highalrm1 = "No Alarm";
                    lowalrm1 = "No Alarm";
                }
                else
                {
                    highalrm1 = Model.Alarm.HighAlarmTemp.ToString();
                    lowalrm1 = Model.Alarm.LowAlarmTemp.ToString();
                }
                if (Model.Alarm.HighAlarmHumid == 1000 || Model.Alarm.HighAlarmHumid == 200 || Model.Alarm.LowAlarmHumid == 1000 || Model.Alarm.LowAlarmHumid == 200)
                {
                    highalrm2 = "No Alarm";
                    lowalrm2 = "No Alarm";
                }
                else
                {
                    highalrm2 = Model.Alarm.HighAlarmHumid.ToString();
                    lowalrm2 = Model.Alarm.LowAlarmHumid.ToString();
                }
            }
            @highalrm1
        </dd>

        <dt>
            Low alarm temp
        </dt>

        <dd>
            @lowalrm1
        </dd>

        <dt>
            High alarm humid
        </dt>
        <dd>
            @highalrm2
        </dd>

        <dt>
            Low alarm humid
        </dt>

        <dd>
            @lowalrm2
        </dd>

        <dt>
            Firmware version
        </dt>

        <dd>
            @Html.DisplayFor(model => model.FirmwareVer)
        </dd>

    </dl>
</div>
<p>
    @Html.ActionLink("Back to List", "Index")
</p>
